//! Module for session IDs.
//!
//! [`Id`] rigourously follows the [OWASP Session Management
//! Guidelines][owasp].
//! 
//! [owasp]:
//! https://owasp.org/www-project-cheat-sheets/cheatsheets/Session_Management_Cheat_Sheet.html#session-id-entropy
use base64::{engine::general_purpose::URL_SAFE_NO_PAD, Engine as _};
use base64::DecodeError;
use serde::{Deserialize, Serialize};
use std::fmt::{self, Display};
use std::str::FromStr;


/// ID type for sessions.
///
/// Wraps an array of 16 bytes.
///
/// __Warning:__ This should be constructed [using a strong CSPRNG][csprng]. Ideally, the ID should
/// be generated by the underlying database if it provides a secure RNG source.
///
/// If a [`SessionStore`] needs to generate IDs, it should use the [`rand`] crate, and it should
/// upstream the decision of which `Rng` provider to use through a generic parameter.
///
/// [`SessionStore`]: crate::SessionStore
/// [csprng]: https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
/// [`rand`]: https://crates.io/crates/rand
/// ```
#[derive(Copy, Clone, Debug, Deserialize, Serialize, Eq, PartialEq, PartialOrd, Ord, Hash)]
pub struct Id(pub u128);

impl Display for Id {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let mut encoded = [0; 22];
        URL_SAFE_NO_PAD
            .encode_slice(self.0.to_le_bytes(), &mut encoded)
            .expect("Encoded ID must be exactly 22 bytes");
        let encoded = std::str::from_utf8(&encoded).expect("Encoded ID must be valid UTF-8");

        f.write_str(encoded)
    }
}

impl FromStr for Id {
    type Err = base64::DecodeSliceError;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let mut decoded = [0; 16];
        let bytes_decoded = URL_SAFE_NO_PAD.decode_slice(s.as_bytes(), &mut decoded)?;
        if bytes_decoded != 16 {
            let err = DecodeError::InvalidLength(bytes_decoded);
            return Err(base64::DecodeSliceError::DecodeError(err));
        }

        Ok(Self(u128::from_le_bytes(decoded)))
    }
}
